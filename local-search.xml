<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java线程中run()和start()的区别</title>
    <link href="undefined2019/11/27/Java%E7%BA%BF%E7%A8%8B%E4%B8%ADrun()%E5%92%8Cstart()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>2019/11/27/Java%E7%BA%BF%E7%A8%8B%E4%B8%ADrun()%E5%92%8Cstart()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>　　今天看了下Java线程方面视频，然后有个疑问就是线程的run()和start()的区别是怎样子的？<br>　　假如我们创建一个线程  Thread t1 = new Thread()。那么区别如下：<br>t1.run();  只是调用了一个普通方法，并没有启动另一个线程，程序还是会按照顺序执行相应的代码。<br>t1.start();  则表示，重新开启一个线程，不必等待其他线程运行完，只要得到cup就可以运行该线程。<br>　　因为run方法是Runnable接口中定义的，start方法是Thread类定义的。 所有实现Runnable的接口的类都需要重写run方法，run方法是线程默认要执行的方法，有底层源码可知是绑定操作系统的，也是线程执行的入口。 start方法是Thread类的默认执行入口，Thread又是实现Runnable接口的。要使线程Thread启动起来，需要通过start方法，表示线程可执行状态，调用start方法后，则表示Thread开始执行，此时run变成了Thread的默认要执行普通方法。<br>　　<br>　　通过start(）方法，直接调用run()方法可以达到多线程的目的 通常，系统通过调用线程类的start()方法来启动一个线程，此时该线程处于就绪状态，而非运行状态，这也就意味着这个线程可以被JVM来调度执行。在调度过程中，JVM会通过调用线程类的run()方法来完成试机的操作，当run()方法结束之后，此线程就会终止。 如果直接调用线程类的run()方法，它就会被当做一个普通的函数调用，程序中任然只有主线程这一个线程。也就是说，star()方法可以异步地调用run()方法，但是直接调用run()方法确实同步的，因此也就不能达到多线程的目的。 run()和start()的区别可以用一句话概括：单独调用run()方法，是同步执行；通过start()调用run()，是异步执行。<br>　　<br>　　所以我们假设想要开启一个线程的话,就用Thread.start()方法。至于为什么，来来来，我们看看Thread.run()做了哪些事情：<br>　　以下代码摘自JDK1.7.0_79的Thread类：　　</p><pre><code class="java"> /**   * If this thread was constructed using a separate   * Runnable run object, then that   * Runnable object&#39;s run method is called;   * otherwise, this method does nothing and returns.   *    * Subclasses of Thread should override this method.   *   * @see   #start()   * @see   #stop()   * @see   #Thread(ThreadGroup, Runnable, String)   */  @Override  public void run() {    if (target != null) {      target.run();    }  }</code></pre><p>可以看到，Thread.run()就是调用了target.run()，而target是啥呢？起始就是你new Thread时传过来的那个Runnable。<br>这时候你可能会纳闷了，Thread这个类这个run方法就是调用我传的那个Runnable的run方法= =，为什么要这么搞呢？？<br>这就要说java线程的两种创建方式啦，第一种就是new Thread(Runnable target)，实现并传进来一个runnable。关键问题来了，Java线程还有第二种创建方式，就是继承Thread类，并且覆写它的run方法。<br>为什么这两种方式都可以呢？？？</p><h3 id="因为，调用start-后，jvm开始线程时，会在新线程里执行Thread的run方法。覆写当然可以啦，然后，如果你没覆写，传进来一个Runnable的话，Thread的run方法默认实现就是调用你这个runnable的run方法，然后就是你这个Runnable的run方法在新线程里执行了。"><a href="#因为，调用start-后，jvm开始线程时，会在新线程里执行Thread的run方法。覆写当然可以啦，然后，如果你没覆写，传进来一个Runnable的话，Thread的run方法默认实现就是调用你这个runnable的run方法，然后就是你这个Runnable的run方法在新线程里执行了。" class="headerlink" title="因为，调用start()后，jvm开始线程时，会在新线程里执行Thread的run方法。覆写当然可以啦，然后，如果你没覆写，传进来一个Runnable的话，Thread的run方法默认实现就是调用你这个runnable的run方法，然后就是你这个Runnable的run方法在新线程里执行了。"></a>因为，调用start()后，jvm开始线程时，会在新线程里执行Thread的run方法。覆写当然可以啦，然后，如果你没覆写，传进来一个Runnable的话，Thread的run方法默认实现就是调用你这个runnable的run方法，然后就是你这个Runnable的run方法在新线程里执行了。</h3><p>另外，值得思考的是，Thread类，也实现了Runnable接口。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="undefined2019/11/25/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/11/25/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>以前是用的WordPress，然后无意之间发现了Hexo便被这个吸粉了。于是自己就打算启用WordPress转为Hexo，废话不多话下面开始撸起袖子干。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么会写博客？</title>
    <link href="undefined2019/11/22/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/"/>
    <url>2019/11/22/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="喜欢写Blog的人，会经历三个阶段。"><a href="#喜欢写Blog的人，会经历三个阶段。" class="headerlink" title="喜欢写Blog的人，会经历三个阶段。"></a>喜欢写Blog的人，会经历三个阶段。</h3><p>　　第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。<br>　　第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>　　第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。我们每个人的在网络上产生的数据越来越多，这些信息是我们在互联网上存在过的痕迹，值得我们认真对待。但是它们被分散分布在各个网站上。很多时候我们很难将它们聚合在一起，而且各个网站的信息排布方式也没有办法自由控制，所以我们需要一个可以由自己主宰的空间——博客。通过博客，我们可以记录自己的生活和成长的轨迹。它不像 Twitter 那样碎片化，也不像 Facebook 那样关系化，它是私人的空间。</p><p>　　好像每一个拥有技术博客的人一般会在开篇写一篇关于为什么自己要建一个技术博客。就好比程序员在学一门新的语言，第一段代码总要写一个Hello World，以表示对这世界的尊重。并发表朋友圈说自己拥有了一个独立的自居地，可以写点技术文章或关于心情的东西，算是把自己“开源”出去了。想想还是写些回顾和思考，不用在乎那么多，或许本来也不必要在乎那么多。至于为什么要创建独立域名的博客，最早也并没有什么计划，而是把我之前写的一些学习笔记从个人笔记里面开放到外面出来。当个人学习笔记只有自己看的时候总会写的很随意，没什么条理。好比当你一个人在家的时候，总是不太喜欢收拾东西，乱七八糟的东西随便放，当有人要来你家的时候，则会提前把房间收拾得干干净净。后来在无意中看到了还有Github Page这种东西，就开始瞎折腾了。本来应该是先选技术再选主题，而我是先选主题再选技术，最后选出了一个自己认为比较好看的主题，最后就用了Hexo这种搭建框架。毕竟这还是一个看脸的世界！从知道到瞎折腾，到最后有一个独立的个人域名<a href="http://www.nanlixuezhang.xyz" target="_blank" rel="noopener">www.nanlixuezhang.xyz</a><br>到个人博客浏览量不断上升，这中间花了很多很多的时间。学习不懂的东西总是这样，一开始觉得很牛逼，等到自己投入一定的精力后，并慢慢搞懂，想想也不过如此，然后好像就可以开始装逼了。 花费了这么多时间和精力，对我个人来说是否有什么影响，应该是说找到了一种比较笨的学习方式。</p><p>　　　写博客是很耗时间的，需要将你学习到的东西通过自己认为比较简练的语言归纳整理，并且有条理或系统地去让别人更容易读懂，在这过程中自己的总结归纳能力等可以得到锻炼，而有的知识你以为懂了，当要写出来的时候会发现好像还没懂，这时候也可以再去思考这个知识。当形成了自己的知识体系后，即时你哪天忘记了你写的内容，也可以很快的找到答案所在的地方。就好比开卷考试，当你记不住答案或者也不一定要记住答案是什么，只需要知道在哪里可以快速找到答案就够了。如果可以快速有效地解决问题，也不一定要关心你是怎么解决的。当你学的东西越来越多，你会发现你不懂的也越来越多，好比一个圆，圆内的面积越大，圆外接触的不懂的东西也越多。</p><p>　　 写博客不难，难的是坚持下去。毕竟这要花挺多时间，你也可能因为写错，或者写的太low，被别人批评，写的东西没人看而带来各种压力。这时候想想你为什么写博客，或许就不会有太多的压力了。</p><p>　　所以我写博客的原因大概就是希望在这个互联网时代上留下自己的印记， 我只代表自己，在自己的领地写自己的生活思考和技能分享。不考虑热点、不考虑粉丝想听什么，单纯地为自己而写。 </p>]]></content>
    
    
    <categories>
      
      <category>碎片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>